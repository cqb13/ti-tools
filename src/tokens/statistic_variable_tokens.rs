use std::collections::HashMap;

pub fn get_statistic_variable_tokens() -> HashMap<u8, String> {
    let tokens: HashMap<u8, String> = [
        (0x00, "internal use only".to_string()),
        (0x01, "[RegEQ]".to_string()),
        (0x02, "[n]".to_string()),
        (0x03, "[xhat]".to_string()),
        (0x04, "[Sigmax]".to_string()),
        (0x05, "[Sigmax^2]".to_string()),
        (0x06, "[Sx]".to_string()),
        (0x07, "[sigmax]".to_string()),
        (0x08, "[minX]".to_string()),
        (0x09, "[maxX]".to_string()),
        (0x0A, "[minY]".to_string()),
        (0x0B, "[maxY]".to_string()),
        (0x0C, "[yhat]".to_string()),
        (0x0D, "[Sigmay]".to_string()),
        (0x0E, "[Sigmay^2]".to_string()),
        (0x0F, "[Sy]".to_string()),
        (0x10, "[sigmay]".to_string()),
        (0x11, "[Sigmaxy]".to_string()),
        (0x12, "[r]".to_string()),
        (0x13, "[Med]".to_string()),
        (0x14, "[Q1]".to_string()),
        (0x15, "[Q3]".to_string()),
        (0x16, "[|a]".to_string()),
        (0x17, "[|b]".to_string()),
        (0x18, "[|c]".to_string()),
        (0x19, "[|d]".to_string()),
        (0x1A, "[|e]".to_string()),
        (0x1B, "[x1]".to_string()),
        (0x1C, "[x2]".to_string()),
        (0x1D, "[x3]".to_string()),
        (0x1E, "[y1]".to_string()),
        (0x1F, "[y2]".to_string()),
        (0x20, "[y3]".to_string()),
        (0x21, "[recursiven]".to_string()),
        (0x22, "[p]".to_string()),
        (0x23, "[z]".to_string()),
        (0x24, "[t]".to_string()),
        (0x25, "[chi^2]".to_string()),
        (0x26, "[|F]".to_string()),
        (0x27, "[df]".to_string()),
        (0x28, "[phat]".to_string()),
        (0x29, "[phat1]".to_string()),
        (0x2A, "[phat2]".to_string()),
        (0x2B, "[xhat1]".to_string()),
        (0x2C, "[Sx1]".to_string()),
        (0x2D, "[n1]".to_string()),
        (0x2E, "[xhat2]".to_string()),
        (0x2F, "[Sx2]".to_string()),
        (0x30, "[n2]".to_string()),
        (0x31, "[Sxp]".to_string()),
        (0x32, "[lower]".to_string()),
        (0x33, "[upper]".to_string()),
        (0x34, "[s]".to_string()),
        (0x35, "[r^2]".to_string()),
        (0x36, "[R^2]".to_string()),
        (0x37, "[factordf]".to_string()),
        (0x38, "[factorSS]".to_string()),
        (0x39, "[factorMS]".to_string()),
        (0x3A, "[errordf]".to_string()),
        (0x3B, "[errorSS]".to_string()),
        (0x3C, "[errorMS]".to_string()),
    ]
    .iter()
    .cloned()
    .collect();

    tokens
}
