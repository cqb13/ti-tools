use std::collections::HashMap;

pub fn get_misc_tokens() -> HashMap<u8, String> {
    let tokens: HashMap<u8, String> = [
        (0x00, "npv(".to_string()),
        (0x01, "irr(".to_string()),
        (0x02, "bal(".to_string()),
        (0x03, "SigmaPrn(".to_string()),
        (0x04, "SigmaInt(".to_string()),
        (0x05, ">Nom(".to_string()),
        (0x06, ">Eff(".to_string()),
        (0x07, "dbd(".to_string()),
        (0x08, "lcm(".to_string()),
        (0x09, "gcd(".to_string()),
        (0x0A, "randInt(".to_string()),
        (0x0B, "randBin(".to_string()),
        (0x0C, "sub(".to_string()),
        (0x0D, "stdDev(".to_string()),
        (0x0E, "variance(".to_string()),
        (0x0F, "inString(".to_string()),
        (0x10, "normalcdf(".to_string()),
        (0x11, "invNorm(".to_string()),
        (0x12, "tcdf(".to_string()),
        (0x13, "chi^2cdf(".to_string()),
        (0x14, "Fcdf(".to_string()),
        (0x15, "binompdf(".to_string()),
        (0x16, "binomcdf(".to_string()),
        (0x17, "poissonpdf(".to_string()),
        (0x18, "poissoncdf(".to_string()),
        (0x19, "geometpdf(".to_string()),
        (0x1A, "geometcdf(".to_string()),
        (0x1B, "normalpdf(".to_string()),
        (0x1C, "tpdf(".to_string()),
        (0x1D, "chi^2pdf(".to_string()),
        (0x1E, "Fpdf(".to_string()),
        (0x1F, "randNorm(".to_string()),
        (0x20, "tvm_Pmt".to_string()),
        (0x21, "tvm_I%".to_string()),
        (0x22, "tvm_PV".to_string()),
        (0x23, "tvm_N".to_string()),
        (0x24, "tvm_FV".to_string()),
        (0x25, "conj(".to_string()),
        (0x26, "real(".to_string()),
        (0x27, "imag(".to_string()),
        (0x28, "angle(".to_string()),
        (0x29, "cumSum(".to_string()),
        (0x2A, "expr(".to_string()),
        (0x2B, "length(".to_string()),
        (0x2C, "DeltaList(".to_string()),
        (0x2D, "ref(".to_string()),
        (0x2E, "rref(".to_string()),
        (0x2F, ">Rect".to_string()),
        (0x30, ">Polar".to_string()),
        (0x31, "[e]".to_string()),
        (0x32, "SinReg ".to_string()),
        (0x33, "Logistic ".to_string()),
        (0x34, "LinRegTTest ".to_string()),
        (0x35, "ShadeNorm(".to_string()),
        (0x36, "Shade_t(".to_string()),
        (0x37, "Shadechi^2(".to_string()),
        (0x38, "ShadeF(".to_string()),
        (0x39, "Matr>list(".to_string()),
        (0x3A, "List>matr(".to_string()),
        (0x3B, "Z-Test(".to_string()),
        (0x3C, "T-Test ".to_string()),
        (0x3D, "2-SampZTest(".to_string()),
        (0x3E, "1-PropZTest(".to_string()),
        (0x3F, "2-PropZTest(".to_string()),
        (0x40, "chi^2-Test(".to_string()),
        (0x41, "ZInterval ".to_string()),
        (0x42, "2-SampZInt(".to_string()),
        (0x43, "1-PropZInt(".to_string()),
        (0x44, "2-PropZInt(".to_string()),
        (0x45, "GraphStyle(".to_string()),
        (0x46, "2-SampTTest ".to_string()),
        (0x47, "2-SampFTest ".to_string()),
        (0x48, "TInterval ".to_string()),
        (0x49, "2-SampTInt ".to_string()),
        (0x4A, "SetUpEditor ".to_string()),
        (0x4B, "Pmt_End".to_string()),
        (0x4C, "Pmt_Bgn".to_string()),
        (0x4D, "Real".to_string()),
        (0x4E, "re^thetai".to_string()),
        (0x4F, "a+bi".to_string()),
        (0x50, "ExprOn".to_string()),
        (0x51, "ExprOff".to_string()),
        (0x52, "ClrAllLists".to_string()),
        (0x53, "GetCalc(".to_string()),
        (0x54, "DelVar ".to_string()),
        (0x55, "Equ>String(".to_string()),
        (0x56, "String>Equ(".to_string()),
        (0x57, "Clear Entries".to_string()),
        (0x58, "Select(".to_string()),
        (0x59, "ANOVA(".to_string()),
        (0x5A, "ModBoxplot".to_string()),
        (0x5B, "NormProbPlot".to_string()),
        (0x64, "G-T".to_string()),
        (0x65, "ZoomFit".to_string()),
        (0x66, "DiagnosticOn".to_string()),
        (0x67, "DiagnosticOff".to_string()),
        (0x68, "Archive ".to_string()),
        (0x69, "UnArchive ".to_string()),
        (0x6A, "Asm(".to_string()),
        (0x6B, "AsmComp(".to_string()),
        (0x6C, "AsmPrgm".to_string()),
        (0x6E, "Á".to_string()),
        (0x6F, "À".to_string()),
        (0x70, "Â".to_string()),
        (0x71, "Ä".to_string()),
        (0x72, "á".to_string()),
        (0x73, "à".to_string()),
        (0x74, "â".to_string()),
        (0x75, "ä".to_string()),
        (0x76, "É".to_string()),
        (0x77, "È".to_string()),
        (0x78, "Ê".to_string()),
        (0x79, "Ë".to_string()),
        (0x7A, "é".to_string()),
        (0x7B, "è".to_string()),
        (0x7C, "ê".to_string()),
        (0x7D, "ë".to_string()),
        (0x7F, "Ì".to_string()),
        (0x80, "Î".to_string()),
        (0x81, "Ï".to_string()),
        (0x82, "í".to_string()),
        (0x83, "ì".to_string()),
        (0x84, "î".to_string()),
        (0x85, "ï".to_string()),
        (0x86, "Ó".to_string()),
        (0x87, "Ò".to_string()),
        (0x88, "Ô".to_string()),
        (0x89, "Ö".to_string()),
        (0x8A, "ó".to_string()),
        (0x8B, "ò".to_string()),
        (0x8C, "ô".to_string()),
        (0x8D, "ö".to_string()),
        (0x8E, "Ú".to_string()),
        (0x8F, "Ù".to_string()),
        (0x90, "Û".to_string()),
        (0x91, "Ü".to_string()),
        (0x92, "ú".to_string()),
        (0x93, "ù".to_string()),
        (0x94, "û".to_string()),
        (0x95, "ü".to_string()),
        (0x96, "Ç".to_string()),
        (0x97, "ç".to_string()),
        (0x98, "Ñ".to_string()),
        (0x99, "ñ".to_string()),
        (0x9A, "|'".to_string()),
        (0x9B, "|`".to_string()),
        (0x9C, "|:".to_string()),
        (0x9D, "|?".to_string()),
        (0x9E, "|!".to_string()),
        (0x9F, "alpha".to_string()),
        (0xA0, "beta".to_string()),
        (0xA1, "gamma".to_string()),
        (0xA2, "Delta".to_string()),
        (0xA3, "delta".to_string()),
        (0xA4, "epsilon".to_string()),
        (0xA5, "lambda".to_string()),
        (0xA6, "mu".to_string()),
        (0xA7, "greek_pi".to_string()),
        (0xA8, "rho".to_string()),
        (0xA9, "Sigma".to_string()),
        (0xAB, "Phi".to_string()),
        (0xAC, "Omega".to_string()),
        (0xAD, "phat".to_string()),
        (0xAE, "chi".to_string()),
        (0xAF, "|F".to_string()),
        (0xB0, "a".to_string()),
        (0xB1, "b".to_string()),
        (0xB2, "c".to_string()),
        (0xB3, "d".to_string()),
        (0xB4, "e".to_string()),
        (0xB5, "f".to_string()),
        (0xB6, "g".to_string()),
        (0xB7, "h".to_string()),
        (0xB8, "i".to_string()),
        (0xB9, "j".to_string()),
        (0xBA, "k".to_string()),
        (0xBC, "l".to_string()),
        (0xBD, "m".to_string()),
        (0xBE, "n".to_string()),
        (0xBF, "o".to_string()),
        (0xC0, "p".to_string()),
        (0xC1, "q".to_string()),
        (0xC2, "r".to_string()),
        (0xC3, "s".to_string()),
        (0xC4, "t".to_string()),
        (0xC5, "u".to_string()),
        (0xC6, "v".to_string()),
        (0xC7, "w".to_string()),
        (0xC8, "x".to_string()),
        (0xC9, "y".to_string()),
        (0xCA, "z".to_string()),
        (0xCB, "sigma".to_string()),
        (0xCC, "tau".to_string()),
        (0xCD, "Í".to_string()),
        (0xCE, "GarbageCollect".to_string()),
        (0xCF, "|~".to_string()),
        (0xD1, "@".to_string()),
        (0xD2, "#".to_string()),
        (0xD3, "$".to_string()),
        (0xD4, "&".to_string()),
        (0xD5, "`".to_string()),
        (0xD6, ";".to_string()),
        (0xD7, "\"".to_string()),
        (0xD8, "|".to_string()),
        (0xD9, "_".to_string()),
        (0xDA, "%".to_string()),
        (0xDB, "...".to_string()),
        (0xDC, "|<".to_string()),
        (0xDD, "sharps".to_string()),
        (0xDE, "^^x".to_string()),
        (0xDF, "smallT".to_string()),
        (0xE0, "small0".to_string()),
        (0xE1, "small1".to_string()),
        (0xE2, "small2".to_string()),
        (0xE3, "small3".to_string()),
        (0xE4, "small4".to_string()),
        (0xE5, "small5".to_string()),
        (0xE6, "small6".to_string()),
        (0xE7, "small7".to_string()),
        (0xE8, "small8".to_string()),
        (0xE9, "small9".to_string()),
        (0xEA, "small10".to_string()),
        (0xEB, "<|".to_string()),
        (0xEC, "|>".to_string()),
        (0xED, "uparrow".to_string()),
        (0xEE, "downarrow".to_string()),
        (0xF0, "xmark".to_string()),
        (0xF1, "integral".to_string()),
        (0xF2, "bolduparrow".to_string()),
        (0xF3, "bolddownarrow".to_string()),
        (0xF4, "squareroot".to_string()),
        (0xF5, "invertedequal".to_string()),
    ]
    .iter()
    .cloned()
    .collect();

    tokens
}
