use std::collections::HashMap;

pub fn get_misc_tokens() -> HashMap<u8, String> {
    let tokens: HashMap<u8, String> = [
        (0x00, "npv(".to_string()),
        (0x01, "irr(".to_string()),
        (0x02, "bal(".to_string()),
        (0x03, "\u{03a3}prn(".to_string()),
        (0x04, "\u{03a3}Int(".to_string()),
        (0x05, "\u{25ba}Nom(".to_string()),
        (0x06, "\u{25ba}Eff(".to_string()),
        (0x07, "dbd(".to_string()),
        (0x08, "lcm(".to_string()),
        (0x09, "gcd(".to_string()),
        (0x0A, "randInt(".to_string()),
        (0x0B, "randBin(".to_string()),
        (0x0C, "sub(".to_string()),
        (0x0D, "stdDev(".to_string()),
        (0x0E, "variance(".to_string()),
        (0x0F, "inString(".to_string()),
        (0x10, "normalcdf(".to_string()),
        (0x11, "invNorm(".to_string()),
        (0x12, "tcdf(".to_string()),
        (0x13, "\u{03c7}\u{00b2}cdf(".to_string()),
        (0x14, "Fcdf(".to_string()),
        (0x15, "binompdf(".to_string()),
        (0x16, "binomcdf(".to_string()),
        (0x17, "poissonpdf(".to_string()),
        (0x18, "poissoncdf(".to_string()),
        (0x19, "geometpdf(".to_string()),
        (0x1A, "geometcdf(".to_string()),
        (0x1B, "normalpdf(".to_string()),
        (0x1C, "tpdf(".to_string()),
        (0x1D, "\u{03c7}\u{00b2}pdf(".to_string()),
        (0x1E, "Fpdf(".to_string()),
        (0x1F, "randNorm(".to_string()),
        (0x20, "tvm_Pmt".to_string()),
        (0x21, "tvm_I%%".to_string()),
        (0x22, "tvm_PV".to_string()),
        (0x23, "tvm_N".to_string()),
        (0x24, "tvm_FV".to_string()),
        (0x25, "conj(".to_string()),
        (0x26, "real(".to_string()),
        (0x27, "imag(".to_string()),
        (0x28, "angle(".to_string()),
        (0x29, "cumSum(".to_string()),
        (0x2A, "expr(".to_string()),
        (0x2B, "length(".to_string()),
        (0x2C, "\u{0394}List(".to_string()),
        (0x2D, "ref(".to_string()),
        (0x2E, "rref(".to_string()),
        (0x2F, "\u{25ba}Rect".to_string()),
        (0x30, "\u{25ba}Polar".to_string()),
        (0x31, "e".to_string()),
        (0x32, "SinReg".to_string()),
        (0x33, "Logistic".to_string()),
        (0x34, "LinRegTTest".to_string()),
        (0x35, "ShadeNorm(".to_string()),
        (0x36, "Shade_t(".to_string()),
        (0x37, "Shade\u{03c7}\u{00b2}".to_string()),
        (0x38, "ShadeF(".to_string()),
        (0x39, "Matr\u{25ba}list(".to_string()),
        (0x3A, "List\u{25ba}matr(".to_string()),
        (0x3B, "Z-Test(".to_string()),
        (0x3C, "T-Test".to_string()),
        (0x3D, "2-SampZTest(".to_string()),
        (0x3E, "1-PropZTest(".to_string()),
        (0x3F, "2-PropZTest(".to_string()),
        (0x40, "\u{03c7}\u{00b2}-Test(".to_string()),
        (0x41, "ZInterval".to_string()),
        (0x42, "2-SampZInt(".to_string()),
        (0x43, "1-PropZInt(".to_string()),
        (0x44, "2-PropZInt(".to_string()),
        (0x45, "GraphStyle(".to_string()),
        (0x46, "2-SampTTest".to_string()),
        (0x47, "2-SampFTest".to_string()),
        (0x48, "TInterval".to_string()),
        (0x49, "2-SampTInt".to_string()),
        (0x4A, "SetUpEditor".to_string()),
        (0x4B, "Pmt_End".to_string()),
        (0x4C, "Pmt_Bgn".to_string()),
        (0x4D, "Real".to_string()),
        (0x4E, "re^\u{03b8}i".to_string()),
        (0x4F, "a+bi".to_string()),
        (0x50, "ExprOn".to_string()),
        (0x51, "ExprOff".to_string()),
        (0x52, "ClrAllLists".to_string()),
        (0x53, "GetCalc(".to_string()),
        (0x54, "DelVar".to_string()),
        (0x55, "Equ\u{25ba}String(".to_string()),
        (0x56, "String\u{25ba}Equ(".to_string()),
        (0x57, "Clear Entries".to_string()),
        (0x58, "Select(".to_string()),
        (0x59, "ANOVA(".to_string()),
        (0x5A, "ModBoxplot".to_string()),
        (0x5B, "NormProbPlot".to_string()),
        (0x5C, "[error: unused code point]".to_string()),
        (0x5D, "[error: unused code point]".to_string()),
        (0x5E, "[error: unused code point]".to_string()),
        (0x5F, "[error: unused code point]".to_string()),
        (0x60, "[error: unused code point]".to_string()),
        (0x61, "[error: unused code point]".to_string()),
        (0x62, "[error: unused code point]".to_string()),
        (0x63, "[error: unused code point]".to_string()),
        (0x64, "G-T".to_string()),
        (0x65, "ZoomFit".to_string()),
        (0x66, "DiagnosticOn".to_string()),
        (0x67, "DiagnosticOff".to_string()),
        (0x68, "Archive".to_string()),
        (0x69, "UnArchive".to_string()),
        (0x6A, "Asm(".to_string()),
        (0x6B, "AsmComp(".to_string()),
        (0x6C, "AsmPrgm".to_string()),
        (0x6D, "compiled asm".to_string()),
        (0x6E, "\u{00c1}".to_string()),
        (0x6F, "\u{00c0}".to_string()),
        (0x70, "\u{00c2}".to_string()),
        (0x71, "\u{00c4}".to_string()),
        (0x72, "\u{00e1}".to_string()),
        (0x73, "\u{00e0}".to_string()),
        (0x74, "\u{00e2}".to_string()),
        (0x75, "\u{00e4}".to_string()),
        (0x76, "\u{00c9}".to_string()),
        (0x77, "\u{00c8}".to_string()),
        (0x78, "\u{00ca}".to_string()),
        (0x79, "\u{00cb}".to_string()),
        (0x7A, "\u{00e9}".to_string()),
        (0x7B, "\u{00e8}".to_string()),
        (0x7C, "\u{00ea}".to_string()),
        (0x7D, "\u{00eb}".to_string()),
        (0x7E, "[error: unused code point]".to_string()),
        (0x7F, "\u{00cc}".to_string()),
        (0x80, "\u{00ce}".to_string()),
        (0x81, "\u{00cf}".to_string()),
        (0x82, "\u{00ed}".to_string()),
        (0x83, "\u{00ec}".to_string()),
        (0x84, "\u{00ee}".to_string()),
        (0x85, "\u{00ef}".to_string()),
        (0x86, "\u{00d3}".to_string()),
        (0x87, "\u{00d2}".to_string()),
        (0x88, "\u{00d4}".to_string()),
        (0x89, "\u{00d6}".to_string()),
        (0x8A, "\u{00f3}".to_string()),
        (0x8B, "\u{00f2}".to_string()),
        (0x8C, "\u{00f4}".to_string()),
        (0x8D, "\u{00f6}".to_string()),
        (0x8E, "\u{00da}".to_string()),
        (0x8F, "\u{00d9}".to_string()),
        (0x90, "\u{00db}".to_string()),
        (0x91, "\u{00dc}".to_string()),
        (0x92, "\u{00fa}".to_string()),
        (0x93, "\u{00f9}".to_string()),
        (0x94, "\u{00fb}".to_string()),
        (0x95, "\u{00fc}".to_string()),
        (0x96, "\u{00c7}".to_string()),
        (0x97, "\u{00e7}".to_string()),
        (0x98, "\u{00d1}".to_string()),
        (0x99, "\u{00f1}".to_string()),
        (0x9A, "\u{00b4}".to_string()),
        (0x9B, "`".to_string()),
        (0x9C, "\u{00a8}".to_string()),
        (0x9D, "\u{00bf}".to_string()),
        (0x9E, "\u{00a1}".to_string()),
        (0x9F, "\u{03b1}".to_string()),
        (0xA0, "\u{03b2}".to_string()),
        (0xA1, "\u{03b3}".to_string()),
        (0xA2, "\u{0394}".to_string()),
        (0xA3, "\u{03b4}".to_string()),
        (0xA4, "\u{03b5}".to_string()),
        (0xA5, "\u{03bb}".to_string()),
        (0xA6, "\u{03bc}".to_string()),
        (0xA7, "\u{03c0}".to_string()),
        (0xA8, "\u{03c1}".to_string()),
        (0xA9, "\u{03a3}".to_string()),
        (0xAA, "[error: unused code point]".to_string()),
        (0xAB, "\u{03c6}".to_string()),
        (0xAC, "\u{03a9}".to_string()),
        (0xAD, "p^".to_string()),
        (0xAE, "\u{03c7}".to_string()),
        (0xAF, "F".to_string()),
        (0xB0, "a".to_string()),
        (0xB1, "b".to_string()),
        (0xB2, "c".to_string()),
        (0xB3, "d".to_string()),
        (0xB4, "e".to_string()),
        (0xB5, "f".to_string()),
        (0xB6, "g".to_string()),
        (0xB7, "h".to_string()),
        (0xB8, "i".to_string()),
        (0xB9, "j".to_string()),
        (0xBA, "k".to_string()),
        (0xBB, "[error: unused code point]".to_string()),
        (0xBC, "l".to_string()),
        (0xBD, "m".to_string()),
        (0xBE, "n".to_string()),
        (0xBF, "o".to_string()),
        (0xC0, "p".to_string()),
        (0xC1, "q".to_string()),
        (0xC2, "r".to_string()),
        (0xC3, "s".to_string()),
        (0xC4, "t".to_string()),
        (0xC5, "u".to_string()),
        (0xC6, "v".to_string()),
        (0xC7, "w".to_string()),
        (0xC8, "x".to_string()),
        (0xC9, "y".to_string()),
        (0xCA, "z".to_string()),
        (0xCB, "\u{03c3}".to_string()),
        (0xCC, "\u{03c4}".to_string()),
        (0xCD, "\u{00cd}".to_string()),
        (0xCE, "GarbageCollect".to_string()),
        (0xCF, "~".to_string()),
        (0xD0, "reserved".to_string()),
        (0xD1, "@".to_string()),
        (0xD2, "#".to_string()),
        (0xD3, "$".to_string()),
        (0xD4, "&".to_string()),
        (0xD5, "`".to_string()),
        (0xD6, ";".to_string()),
        (0xD7, "\\".to_string()),
        (0xD8, "|".to_string()),
        (0xD9, "_".to_string()),
        (0xDA, "%%".to_string()),
        (0xDB, "\u{2026}".to_string()),
        (0xDC, "\u{2220}".to_string()),
        (0xDD, "\u{00df}".to_string()),
        (0xDE, "x".to_string()),
        (0xDF, "T".to_string()),
        (0xE0, "0".to_string()),
        (0xE1, "1".to_string()),
        (0xE2, "2".to_string()),
        (0xE3, "3".to_string()),
        (0xE4, "4".to_string()),
        (0xE5, "5".to_string()),
        (0xE6, "6".to_string()),
        (0xE7, "7".to_string()),
        (0xE8, "8".to_string()),
        (0xE9, "9".to_string()),
        (0xEA, "10".to_string()),
        (0xEB, "\u{2190}".to_string()),
        (0xEC, "\u{2192}".to_string()),
        (0xED, "\u{2191}".to_string()),
        (0xEE, "\u{2193}".to_string()),
        (0xEF, "[error: unused code point]".to_string()),
        (0xF0, "x".to_string()),
        (0xF1, "\u{222b}".to_string()),
        (0xF2, "[up arrow]".to_string()),
        (0xF3, "[down arrow]".to_string()),
        (0xF4, "\u{221a}".to_string()),
        (0xF5, "[equals block]".to_string()),
        (0xF6, "[error: unused code point]".to_string()),
        (0xF7, "[error: unused code point]".to_string()),
        (0xF8, "[error: unused code point]".to_string()),
        (0xF9, "[error: unused code point]".to_string()),
        (0xFA, "[error: unused code point]".to_string()),
        (0xFB, "[error: unused code point]".to_string()),
        (0xFC, "[error: unused code point]".to_string()),
        (0xFD, "[error: unused code point]".to_string()),
        (0xFE, "[error: unused code point]".to_string()),
        (0xFF, "[error: unused code point]".to_string()),
    ]
    .iter()
    .cloned()
    .collect();

    tokens
}
