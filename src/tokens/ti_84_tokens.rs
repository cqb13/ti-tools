use std::collections::HashMap;

pub fn get_ti_84_tokens() -> HashMap<u8, String> {
    let tokens: HashMap<u8, String> = [
        (0x00, "setDate(".to_string()),
        (0x01, "setTime(".to_string()),
        (0x02, "checkTmr(".to_string()),
        (0x03, "setDtFmt(".to_string()),
        (0x04, "setTmFmt(".to_string()),
        (0x05, "timeCnv(".to_string()),
        (0x06, "dayOfWk(".to_string()),
        (0x07, "getDtStr(".to_string()),
        (0x08, "getTmStr(".to_string()),
        (0x09, "getDate".to_string()),
        (0x0A, "getTime".to_string()),
        (0x0B, "startTmr".to_string()),
        (0x0C, "getDtFmt".to_string()),
        (0x0D, "getTmFmt".to_string()),
        (0x0E, "isClockOn".to_string()),
        (0x0F, "ClockOff".to_string()),
        (0x10, "ClockOn".to_string()),
        (0x11, "OpenLib(".to_string()),
        (0x12, "ExecLib ".to_string()),
        (0x13, "invT(".to_string()),
        (0x14, "chi^2GOF-Test(".to_string()),
        (0x15, "LinRegTInt ".to_string()),
        (0x16, "Manual-Fit ".to_string()),
        (0x17, "ZQuadrant1".to_string()),
        (0x18, "ZFrac1/2".to_string()),
        (0x19, "ZFrac1/3".to_string()),
        (0x1A, "ZFrac1/4".to_string()),
        (0x1B, "ZFrac1/5".to_string()),
        (0x1C, "ZFrac1/8".to_string()),
        (0x1D, "ZFrac1/10".to_string()),
        (0x1E, "mathprintbox".to_string()),
        (0x2E, "n/d".to_string()),
        (0x2F, "Un/d".to_string()),
        (0x30, ">n/d<>Un/d".to_string()),
        (0x31, ">F<>D".to_string()),
        (0x32, "remainder(".to_string()),
        (0x33, "Sigma(".to_string()),
        (0x34, "logBASE(".to_string()),
        (0x35, "randIntNoRep(".to_string()),
        (0x37, "[MATHPRINT]".to_string()),
        (0x38, "[CLASSIC]".to_string()),
        (0x39, "[n/d]".to_string()),
        (0x3A, "[Un/d]".to_string()),
        (0x3B, "[AUTO]".to_string()),
        (0x3C, "[DEC]".to_string()),
        (0x3D, "[FRAC-APPROX]".to_string()),
        (0x3F, "[STATWIZARD ON]".to_string()),
        (0x40, "[STATWIZARD OFF]".to_string()),
        (0x41, "BLUE".to_string()),
        (0x42, "RED".to_string()),
        (0x43, "BLACK".to_string()),
        (0x44, "MAGENTA".to_string()),
        (0x45, "GREEN".to_string()),
        (0x46, "ORANGE".to_string()),
        (0x47, "BROWN".to_string()),
        (0x48, "NAVY".to_string()),
        (0x49, "LTBLUE".to_string()),
        (0x4A, "YELLOW".to_string()),
        (0x4B, "WHITE".to_string()),
        (0x4C, "LTGRAY".to_string()),
        (0x4D, "MEDGRAY".to_string()),
        (0x4E, "GRAY".to_string()),
        (0x4F, "DARKGRAY".to_string()),
        (0x50, "Image1".to_string()),
        (0x51, "Image2".to_string()),
        (0x52, "Image3".to_string()),
        (0x53, "Image4".to_string()),
        (0x54, "Image5".to_string()),
        (0x55, "Image6".to_string()),
        (0x56, "Image7".to_string()),
        (0x57, "Image8".to_string()),
        (0x58, "Image9".to_string()),
        (0x59, "Image0".to_string()),
        (0x5A, "GridLine ".to_string()),
        (0x5B, "BackgroundOn ".to_string()),
        (0x64, "BackgroundOff".to_string()),
        (0x65, "GraphColor(".to_string()),
        (0x66, "QuickPlot&Fit-EQ".to_string()),
        (0x67, "TextColor(".to_string()),
        (0x68, "Asm84CPrgm".to_string()),
        (0x6A, "DetectAsymOn".to_string()),
        (0x6B, "DetectAsymOff".to_string()),
        (0x6C, "BorderColor ".to_string()),
        (0x73, "plottinydot".to_string()),
        (0x74, "Thin".to_string()),
        (0x75, "Dot-Thin".to_string()),
        (0x79, "PlySmlt2".to_string()),
        (0x7A, "Asm84CEPrgm".to_string()),
        (0x81, "Quartiles Setting...".to_string()),
        (0x82, "u(n-2)".to_string()),
        (0x83, "v(n-2)".to_string()),
        (0x84, "w(n-2)".to_string()),
        (0x85, "u(n-1)".to_string()),
        (0x86, "v(n-1)".to_string()),
        (0x87, "w(n-1)".to_string()),
        (0x88, "u(n)".to_string()),
        (0x89, "v(n)".to_string()),
        (0x8A, "w(n)".to_string()),
        (0x8B, "u(n+1)".to_string()),
        (0x8C, "v(n+1)".to_string()),
        (0x8D, "w(n+1)".to_string()),
        (0x8E, "pieceWise(".to_string()),
        (0x8F, "SEQ(n)".to_string()),
        (0x90, "SEQ(n+1)".to_string()),
        (0x91, "SEQ(n+2)".to_string()),
        (0x92, "LEFT".to_string()),
        (0x93, "CENTER".to_string()),
        (0x94, "RIGHT".to_string()),
        (0x95, "invBinom(".to_string()),
        (0x96, "Wait ".to_string()),
        (0x97, "toString(".to_string()),
        (0x98, "eval(".to_string()),
        (0x9E, "Execute Program".to_string()),
        (0x9F, "Undo Clear".to_string()),
        (0xA0, "Insert Line Above".to_string()),
        (0xA1, "Cut Line".to_string()),
        (0xA2, "Copy Line".to_string()),
        (0xA3, "Paste Line Below".to_string()),
        (0xA4, "Insert Comment Above".to_string()),
        (0xA5, "Quit Editor".to_string()),
        (0xA6, "piecewise(".to_string()),
    ]
    .iter()
    .cloned()
    .collect();

    tokens
}
